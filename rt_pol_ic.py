
import networkx as nx
import ndlib.models.ModelConfig as mc
import ndlib.models.epidemics.IndependentCascadesModel as ids
import matplotlib
import random
from bokeh.io import output_notebook, show
from ndlib.viz.bokeh.DiffusionTrend import DiffusionTrend
import numpy
import itertools
from operator import add
import pandas as pd

# core_euemail="668 2080 9046 11689 11690 11691 11693 11694 11698 11700 11701 11703 11704 11707 11712 11714 11719 11720 11722 11724 11725 11728 11731 11734 11735 11738 11739 11743 11819 11824 11831 11835 11838 11839 11840 11841 11843 11849 11851 11852 11853 11854 11856 11857 11858 11859 11860 11862 11863 11864 11865 11866 11867 11870 11871 11873 11874 11875 11876 11950 11961 12152 14101 25118 30884 30887 30891 30892 30893 30895 30898 30899 30901 30902 38363 41473 44832 46032 47887 49166 51632 52352 53171 53632 54231 54251 54253 55005 55176 55516 55760 55850 55861 56099 56101 56102 56106 56110 56112 56114 56115 56129 56137 56140 56141 56142 56144 56145 56146 56148 56151 56161 56162 56292 56342 56344 56346 56348 56372 56375 56395 56707 56841 56845 56847 56848 56851 56856 56857 57140 57148 57151 57153 57155 57156 57165 57169 57171 57172 57177 57305 57307 57518 57523 57665 59117 59118 59132 59148"

# core_euemail=set(core_euemail.split(" "))

# truss_euemail="668 2080 9046 11689 11691 11693 11694 11698 11700 11701 11703 11704 11707 11712 11714 11719 11720 11722 11724 11725 11728 11731 11735 11738 11739 11743 11819 11824 11831 11835 11838 11839 11840 11841 11843 11849 11851 11852 11853 11854 11856 11857 11858 11859 11860 11862 11863 11864 11865 11866 11867 11870 11871 11873 11874 11875 11876 11950 11961 12152 14101 25118 30887 30891 30892 30893 30895 30898 30899 30901 30902 38363 41473 44832 46032 47887 49166 51632 52352 53632 54231 54251 54253 55005 55516 55760 55861 56099 56101 56102 56106 56110 56112 56114 56115 56129 56137 56140 56141 56142 56144 56145 56146 56148 56151 56161 56162 56292 56342 56372 56375 56395 56707 56841 56845 56847 56848 56851 56857 57140 57148 57151 57153 57155 57156 57165 57169 57171 57305 57307 57518 57523 59117 59118 59132"

# truss_euemail=set(truss_euemail.split(" "))

# nuc_euemail = "668 9046 11689 11691 11693 11694 11700 11701 11703 11704 11707 11712 11714 11719 11722 11724 11725 11731 11735 11738 11743 11819 11824 11831 11835 11839 11840 11841 11851 11852 11853 11854 11856 11857 11858 11859 11862 11863 11864 11865 11866 11870 11871 11873 11874 11875 11876 11961 14101 25118 30891 30892 30893 30895 30898 30901 38363 41473 44832 46032 47887 49166 51632 52352 53632 54253 55005 55516 55760 55861 56099 56101 56102 56106 56110 56112 56114 56115 56129 56137 56140 56141 56142 56144 56145 56146 56148 56151 56161 56162 56292 56342 56372 56395 56707 56841 56845 56848 56851 57140 57148 57151 57153 57155 57156 57165 57169 57171 57305 57307 57518 57523"
# nuc_euemail=set(nuc_euemail.split(" "))


core_euemail = "15248 121 300 675 885 1070 1115 1126 1141 1195 1205 1247 1371 1393 1438 1473 1490 1735 1787 1885 2034 2154 2468 2480 2506 2657 2701 2759 2982 3076 3117 3120 3165 3176 3307 3337 3422 3520 3677 3731 4056 4066 4075 4224 4336 4481 4544 4583 4601 4644 4682 4732 4860 5010 5028 5153 5372 5461 5509 5770 5776 5866 5879 6024 6072 6105 6208 6213 6294 6297 6316 6325 6558 6580 6683 6799 6940 7133 7271 7406 7519 7578 7635 7708 7720 7747 7770 8418 8435 8556 8675 8710 8719 8796 8888 9017 9059 9166 9198 9310 9392 9463 9581 9691 9742 9776 9826 9864 9868 10078 10255 10483 10663 10670 10722 10826 10871 11156 11184 11342 11674 11687 11827 11837 12051 12094 12105 12108 12162 12176 12201 12220 12339 12464 12566 12602 12660 12800 12905 12937 13014 13147 13159 13256 13340 13445 13652 13661 13794 14005 14358 14393 14467 14498 14555 14556 14729 14749 14786 14885 15011 15162 15245 15333 15570 15714 15966 16168 16233 16281 16348 16387 16397 16578 16595 17141 17149 17206 17395 17445 17521 17673 17738 17744 17837 17894 17936 17960 18099 18114 18139 18198 18215 18306"
core_euemail = set(core_euemail.split(" "))
truss_euemail="5925	218 701 790 1888 2188 2402 3059 3630 4085 4924 4949 5677 6049 8123 8190 8208 8322 9419 9811 9942 10349 10391 10854 10944 11548 11804 11805 11833 12033 13300 13643 13775 14025 14584 15078 15896 16014 16260 17937 18416 5948	121 1126 1247 1393 1473 1490 1787 2154 2468 3076 3117 3176 4075 4601 4644 4682 5010 5153 5509 5776 6294 6580 6799 7635 7720 7770 8435 8556 8796 9017 9198 9392 9581 9691 9864 9868 10078 10255 10722 11554 11674 11827 11837 12220 12339 12566 12800 12937 13014 13256 13340 13652 14005 14393 14467 14729 14749 15011 15966 16233 16397 17521 17673 17936 18099 18215"
truss_euemail=set(truss_euemail.split(" "))
nuc_euemail= "1994	6294 7770 9581 10078 12339 13014 14005  1994 121 1490 1787 9581 9691 16233 17936 1994 1473 5010 7770 8556 9392 9864 10078 1994 1247 2154 4075 5776 8435 8556 8796 9198 9691 10078 10722 11827 12339 13014 14467 15966 16397 18099 18215    1990    701 790 3059 4949 5677 8123 8190 9419 9942 10854 11805 11833 13300 14584 15896 16260 6049 10391 11548 11804 11833 13300 18416"
nuc_euemail=set(nuc_euemail.split(" "))


gg=[]




with open("/home/rragarwa/Documents/nucleus/nd/rt-pol2.txt", 'r') as f:
    next(f)
    for line in f:
        k=line.split()
        gg.append([k[0], k[1]])


g = nx.DiGraph()

g.add_edges_from(gg)

g2=g.to_undirected()


# L = nx.normalized_laplacian_matrix(g2)
# e = numpy.linalg.eigvals(numpy.asarray(L))




g2=g.to_undirected()

deg=nx.degree_centrality(g2)

deg= sorted(deg.items(), key=lambda kv: kv[1], reverse=True)

deg2=[x[0] for x in deg[:100]]

deg2 = set(deg2)

niter=1000
row=[[]]
all_m=[nuc_euemail, truss_euemail, core_euemail, deg2]



for trs in [0.001, 0.005, 0.01, 0.03, 0.05, 0.1, 0.5,1]:
    for sampsize in [1,5, 20, 45]:
        #print("#####")
        #print(sampsize)
        for dataset in all_m:
            res={}

            for i in range(niter):
                res[i+1]=[]

            for i in range(niter):
                kk=30
                model = ids.IndependentCascadesModel(g)
                T= set(random.sample(dataset, sampsize))
                #print(T)
                # Model Configuration
                config = mc.Configuration()
                config.add_model_initial_configuration("Infected", T )
                #config.add_model_parameter('percentage_infected', 0.001)

                # Setting the edge parameters

                for e in g.edges():
                    config.add_edge_configuration("threshold", e,  random.uniform(0, trs))
                    #config.add_edge_configuration("threshold", e,  .96 )
                #print(config)

                model.set_initial_status(config)
                iterations = model.iteration_bunch(kk)
                for j in range(kk):
                    #print(iterations[j]["node_count"])
                    res[i+1].append(iterations[j]["status_delta"][2])
                    
            for l in range(1, niter+1):
                row.append([ l, all_m.index(dataset)+1, trs, sampsize]+res[l])

df=pd.DataFrame(row)

df.to_csv("/home/rragarwa/Documents/nucleus/python_codes/rt_pol_1000.csv")
